package main

import (
	"bytes"
	"context"
	"doctor/config"
	"doctor/traits/logger"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"os/signal"
	"path/filepath"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
	"github.com/go-telegram/ui/slider"
	"go.uber.org/zap"
)

// –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
type DoctorRegistration struct {
	ID          int64
	FullName    string
	Contact     string
	TelegramID  int64
	AvatarPath  string // –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ ./ava
	DiplomaPath string // –≤ ./documents
	CertPath    string // –≤ ./documents
}

var (
	registrations      = make(map[int64]DoctorRegistration)    // –æ–±—â–∞—è –º–∞–ø–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Ä–∞—á–∞
	doctorsBySpecialty = make(map[string][]DoctorRegistration) // –¥–ª—è –∫–∞–∂–¥–æ–π —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ —Å—Ä–µ–∑ –≤—Ä–∞—á–µ–π
	regMu              sync.Mutex
)

// specialtyMapping –ø—Ä–∏–≤–æ–¥–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π (–Ω–∞ —Ä—É—Å—Å–∫–æ–º) –∫ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –≤–∏–¥—É (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º).
var specialtyMapping = map[string]string{
	"–¢–µ—Ä–∞–ø–µ–≤—Ç":          "THERAPIST",
	"–•–∏—Ä—É—Ä–≥":            "SURGEON",
	"–ö–∞—Ä–¥–∏–æ–ª–æ–≥":         "CARDIOLOG",
	"–ù–µ–≤—Ä–æ–ª–æ–≥":          "NEUROLOGIST",
	"–õ–û–†":               "ENT",
	"–ü—Å–∏—Ö–æ–ª–æ–≥":          "PSYCHOLOGIST",
	"–í—Ä–∞—á –Ω–∞ –¥–æ–º—É":      "HOME_DOCTOR",
	"–ú–µ–¥—Å–µ—Å—Ç—Ä–∞ –Ω–∞ –¥–æ–º—É": "HOME_NURSE",
	"–ê–Ω–∞–ª–∏–∑":            "LAB_TEST",
	"–ö–∞–ø–µ–ª—å–Ω–∏—Ü–∞ –∫ –º–µ–¥–ø–µ—Ä—Å–æ–Ω–∞–ª—É": "IV_DRIP",
}

// reverseSpecialtyMapping –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.
var reverseSpecialtyMapping = map[string]string{
	"THERAPIST":    "–¢–µ—Ä–∞–ø–µ–≤—Ç",
	"SURGEON":      "–•–∏—Ä—É—Ä–≥",
	"CARDIOLOG":    "–ö–∞—Ä–¥–∏–æ–ª–æ–≥",
	"NEUROLOGIST":  "–ù–µ–≤—Ä–æ–ª–æ–≥",
	"ENT":          "–õ–û–†",
	"PSYCHOLOGIST": "–ü—Å–∏—Ö–æ–ª–æ–≥",
	"HOME_DOCTOR":  "–í—Ä–∞—á –Ω–∞ –¥–æ–º—É",
	"HOME_NURSE":   "–ú–µ–¥—Å–µ—Å—Ç—Ä–∞ –Ω–∞ –¥–æ–º—É",
	"LAB_TEST":     "–ê–Ω–∞–ª–∏–∑",
	"IV_DRIP":      "–ö–∞–ø–µ–ª—å–Ω–∏—Ü–∞ –∫ –º–µ–¥–ø–µ—Ä—Å–æ–Ω–∞–ª—É",
}

func main() {
	zapLogger, err := logger.NewLogger()
	if err != nil {
		panic(err)
	}

	ctx, cancel := signal.NotifyContext(context.Background(), os.Interrupt)
	defer cancel()

	cfg, err := config.NewConfig()
	if err != nil {
		zapLogger.Error("error init config", zap.Error(err))
		return
	}

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline callback
	opts := []bot.Option{
		bot.WithDefaultHandler(handler),
		bot.WithCallbackQueryDataHandler("doctor_", bot.MatchTypePrefix, InlineHandlerWrapper),
	}

	token := cfg.Token

	b, err := bot.New(token, opts...)
	if err != nil {
		zapLogger.Error("error creating bot config", zap.Error(err))
		return
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä —Å –º–∞—Ä—à—Ä—É—Ç–∞–º–∏:
	// /doctor ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Ä–∞—á–∞ (POST-—Ñ–æ—Ä–º–∞ —Å —Ñ–∞–π–ª–æ–º)
	// /api/open ‚Äî –ø—Ä–∏—ë–º –∑–∞—è–≤–æ–∫ –æ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ (GET/POST-–∑–∞–ø—Ä–æ—Å)
	go startWebServer(cfg.Token, ctx, b)
	zapLogger.Info("started bot")
	b.Start(ctx)
}

// handler ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –±–æ—Ç—É –Ω–∞–ø—Ä—è–º—É—é).
func handler(ctx context.Context, b *bot.Bot, update *models.Update) {
	if update.Message == nil {
		return
	}
	_, err := b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text:   "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-—Ñ–æ—Ä–º—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
	})
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

// InlineHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è inline-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤—Ä–∞—á–∞.
func InlineHandler(ctx context.Context, b *bot.Bot, callback *models.CallbackQuery) {
	parts := strings.Split(callback.Data, "_")
	if len(parts) < 2 {
		b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
			CallbackQueryID: callback.ID,
			Text:            "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
		})
		return
	}

	doctorID, err := strconv.ParseInt(parts[1], 10, 64)
	if err != nil {
		b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
			CallbackQueryID: callback.ID,
			Text:            "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ID",
		})
		return
	}

	regMu.Lock()
	registration, exists := registrations[doctorID]
	if exists {
		delete(registrations, doctorID)
	}
	regMu.Unlock()

	if !exists {
		b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
			CallbackQueryID: callback.ID,
			Text:            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
		})
		return
	}

	confirmationText := "–í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –í—ã —Ç–µ–ø–µ—Ä—å –¥–æ–∫—Ç–æ—Ä! üòä"
	_, err = b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: registration.TelegramID,
		Text:   confirmationText,
	})
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–∫—Ç–æ—Ä—É: %v", err)
	}

	b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
		CallbackQueryID: callback.ID,
		Text:            "–î–æ–∫—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!",
	})
}

// InlineHandlerWrapper –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç InlineHandler –∫ —Ç–∏–ø—É bot.HandlerFunc.
func InlineHandlerWrapper(ctx context.Context, b *bot.Bot, update *models.Update) {
	if update.CallbackQuery == nil {
		return
	}
	InlineHandler(ctx, b, update.CallbackQuery)
}

func startWebServer(botToken string, ctx context.Context, b *bot.Bot) {
	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Ä–∞—á–∞.
	http.HandleFunc("/doctor", func(w http.ResponseWriter, r *http.Request) {
		// CORS-preflight
		if r.Method == http.MethodOptions {
			w.Header().Set("Access-Control-Allow-Origin", "*")
			w.Header().Set("Access-Control-Allow-Methods", "POST, OPTIONS")
			w.Header().Set("Access-Control-Allow-Headers", "Content-Type")
			w.WriteHeader(http.StatusOK)
			return
		}

		if r.Method == http.MethodPost {
			doctorHandler(w, r, ctx, b)
		} else {
			http.Error(w, "–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω", http.StatusMethodNotAllowed)
		}
	})

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞—è–≤–æ–∫ –æ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤.
	http.HandleFunc("/api/open", func(w http.ResponseWriter, r *http.Request) {
		if r.Method == http.MethodPost || r.Method == http.MethodGet {
			patientAppointmentHandler(w, r, ctx, b)
		} else {
			http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		}
	})

	// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å—Ç–∞—Ç–∏–∫–∏.
	http.HandleFunc("/", serveIndex)

	port := "8080"
	log.Printf("–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É :%s", port)
	log.Fatal(http.ListenAndServe(":"+port, nil))
}

func serveIndex(w http.ResponseWriter, r *http.Request) {
	http.ServeFile(w, r, "index.html")
}

func serveDoctor(w http.ResponseWriter, r *http.Request) {
	http.ServeFile(w, r, "doctor.html")
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /doctor POST —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º slider –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä—ë—Ö —Ñ–∞–π–ª–æ–≤
func doctorHandler(w http.ResponseWriter, r *http.Request, ctx context.Context, b *bot.Bot) {
	// CORS‚Äëpreflight
	if r.Method == http.MethodOptions {
		w.Header().Set("Access-Control-Allow-Origin", "*")
		w.Header().Set("Access-Control-Allow-Methods", "POST, OPTIONS")
		w.Header().Set("Access-Control-Allow-Headers", "Content-Type")
		w.WriteHeader(http.StatusOK)
		return
	}
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Content-Type", "text/plain; charset=utf-8")

	if err := r.ParseMultipartForm(32 << 20); err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–æ—Ä–º—ã: "+err.Error(), http.StatusBadRequest)
		return
	}

	fullName := r.FormValue("full_name")
	contact := r.FormValue("contact")
	telegramIDStr := r.FormValue("telegram_id")
	telegramID, err := strconv.ParseInt(telegramIDStr, 10, 64)
	if err != nil {
		http.Error(w, "–ù–µ–≤–µ—Ä–Ω—ã–π Telegram ID: "+err.Error(), http.StatusBadRequest)
		return
	}

	avaDir := "./ava"
	docsDir := "./documents"
	os.MkdirAll(avaDir, 0755)
	os.MkdirAll(docsDir, 0755)

	saveFile := func(field, dst string) (string, error) {
		file, hdr, err := r.FormFile(field)
		if err != nil {
			return "", err
		}
		defer file.Close()
		name := fmt.Sprintf("%d_%s", time.Now().UnixNano(), hdr.Filename)
		path := filepath.Join(dst, name)
		out, err := os.Create(path)
		if err != nil {
			return "", err
		}
		defer out.Close()
		if _, err := io.Copy(out, file); err != nil {
			return "", err
		}
		return path, nil
	}

	avatarPath, err := saveFile("avatar", avaDir)
	if err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∏: "+err.Error(), http.StatusBadRequest)
		return
	}
	diplomaPath, err := saveFile("diploma", docsDir)
	if err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∏–ø–ª–æ–º–∞: "+err.Error(), http.StatusBadRequest)
		return
	}
	certPath, err := saveFile("certificate", docsDir)
	if err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: "+err.Error(), http.StatusBadRequest)
		return
	}

	doctorID := time.Now().Unix()
	reg := DoctorRegistration{
		ID:          doctorID,
		FullName:    fullName,
		Contact:     contact,
		TelegramID:  telegramID,
		AvatarPath:  avatarPath,
		DiplomaPath: diplomaPath,
		CertPath:    certPath,
	}
	regMu.Lock()
	registrations[doctorID] = reg
	regMu.Unlock()

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–∞–π–¥—ã: –∞–≤–∞—Ç–∞—Ä, –¥–∏–ø–ª–æ–º, —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
	files := []struct{ Label, Path string }{
		{"–ê–≤–∞—Ç–∞—Ä–∫–∞", reg.AvatarPath},
		{"–î–∏–ø–ª–æ–º", reg.DiplomaPath},
		{"–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç", reg.CertPath},
	}
	slides := make([]slider.Slide, 0, len(files))
	for _, f := range files {
		data, err := os.ReadFile(f.Path)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ %s: %v", f.Path, err)
			continue
		}
		slides = append(slides, slider.Slide{
			Text:     f.Label,
			Photo:    string(data),
			IsUpload: true,
		})
	}

	// Callback –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª
	onSelect := func(ctx context.Context, b *bot.Bot, msg models.MaybeInaccessibleMessage, idx int) {
		if msg.Message != nil {
			b.SendMessage(ctx, &bot.SendMessageParams{
				ChatID: msg.Message.Chat.ID,
				Text:   fmt.Sprintf("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Ä–∞—á–∞ %s –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ", reg.FullName),
			})
		}
	}

	opts := []slider.Option{
		slider.OnSelect("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", true, onSelect),
	}

	admins := []int64{800703982, 809550522}
	for _, adminID := range admins {
		sl := slider.New(b, slides, opts...)
		sl.Show(ctx, b, adminID)
	}

	// –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–∞–º–æ–≥–æ –≤—Ä–∞—á–∞
	_, _ = b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: reg.TelegramID,
		Text:   "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
	})

	w.WriteHeader(http.StatusOK)
	w.Write([]byte("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞ –∏ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."))
}

// patientAppointmentHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ –æ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ —Ñ–æ—Ç–æ –∂–∞–ª–æ–±—ã.
// –ï—Å–ª–∏ —Ñ–æ—Ç–æ –∂–∞–ª–æ–±—ã –ø–µ—Ä–µ–¥–∞–Ω–æ, –æ–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é "./patient".
func patientAppointmentHandler(w http.ResponseWriter, r *http.Request, ctx context.Context, b *bot.Bot) {
	var (
		fullName, age, gender, complaints, duration string
		specialty, contacts, address                string
		photoData                                   []byte
		photoFileName                               string
		err                                         error
	)

	// –ü–æ–¥–¥–µ—Ä–∂–∫–∞ POST (—Å —Ñ–∞–π–ª–æ–º) –∏ GET (–±–µ–∑ —Ñ–∞–π–ª–∞)
	if r.Method == http.MethodPost {
		if err = r.ParseMultipartForm(32 << 20); err != nil {
			http.Error(w, "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–æ—Ä–º—ã: "+err.Error(), http.StatusBadRequest)
			return
		}
		fullName = r.FormValue("full_name")
		age = r.FormValue("age")
		gender = r.FormValue("gender")
		complaints = r.FormValue("complaints")
		duration = r.FormValue("duration")
		specialty = r.FormValue("specialty")
		contacts = r.FormValue("contacts")
		address = r.FormValue("address")
		file, header, err := r.FormFile("complaint_photo")
		if err == nil { // —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω
			defer file.Close()
			photoData, err = io.ReadAll(file)
			if err != nil {
				photoData = nil
			} else {
				photoFileName = header.Filename
			}
		} else {
			photoData = nil
		}
	} else { // GET-–∑–∞–ø—Ä–æ—Å
		q := r.URL.Query()
		fullName = q.Get("full_name")
		age = q.Get("age")
		gender = q.Get("gender")
		complaints = q.Get("complaints")
		duration = q.Get("duration")
		specialty = q.Get("specialty")
		contacts = q.Get("contacts")
		address = q.Get("address")
		photoData = nil
	}

	// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∂–∞–ª–æ–±—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é "./patient" (–µ—Å–ª–∏ —Ñ–∞–π–ª –ø–µ—Ä–µ–¥–∞–Ω)
	if photoData != nil {
		patientDir := "./patient"
		if err := os.MkdirAll(patientDir, 0755); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '%s': %v", patientDir, err)
		} else {
			fileName := fmt.Sprintf("patient_%d_%s", time.Now().UnixNano(), photoFileName)
			savePath := filepath.Join(patientDir, fileName)
			if err := os.WriteFile(savePath, photoData, 0644); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –≤ '%s': %v", patientDir, err)
			} else {
				log.Printf("–§–æ—Ç–æ –∂–∞–ª–æ–±—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: %s", savePath)
			}
		}
	}

	// –ü—Ä–∏–≤–æ–¥–∏–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∫ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –≤–∏–¥—É.
	if mapped, ok := specialtyMapping[specialty]; ok {
		specialty = mapped
	}
	// –ü–æ–ª—É—á–∞–µ–º —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.
	specialtyHuman := specialty
	if rev, ok := reverseSpecialtyMapping[specialty]; ok {
		specialtyHuman = rev
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:
	// –ü–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –∏ –∞–¥—Ä–µ—Å–æ–º)
	fullMsgText := fmt.Sprintf(
		"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–∏—ë–º:\n–§–ò–û: %s\n–í–æ–∑—Ä–∞—Å—Ç: %s\n–ü–æ–ª: %s\n–ñ–∞–ª–æ–±—ã: %s\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏–º–ø—Ç–æ–º–æ–≤: %s –¥–Ω–µ–π\n–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: %s\n–ö–æ–Ω—Ç–∞–∫—Ç—ã: %s\n–ê–¥—Ä–µ—Å: %s",
		fullName, age, gender, complaints, duration, specialtyHuman, contacts, address,
	)
	// –£–º–µ–Ω—å—à—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—Ä–∞—á–µ–π –∏ –≥—Ä—É–ø–ø—ã (–±–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏ –∞–¥—Ä–µ—Å–∞)
	reducedMsgText := fmt.Sprintf(
		"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–∏—ë–º:\n–§–ò–û: %s\n–í–æ–∑—Ä–∞—Å—Ç: %s\n–ü–æ–ª: %s\n–ñ–∞–ª–æ–±—ã: %s\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏–º–ø—Ç–æ–º–æ–≤: %s –¥–Ω–µ–π\n–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: %s",
		fullName, age, gender, complaints, duration, specialtyHuman,
	)

	// –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –≥—Ä—É–ø–ø–∞
	admins := []int{800703982, 809550522}
	var groupID int64 = -1009876543210

	// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å)
	sendMsg := func(chatID int64, text string) {
		if photoData != nil {
			photoUpload := &models.InputFileUpload{
				Filename: photoFileName,
				Data:     bytes.NewReader(photoData),
			}
			_, err := b.SendPhoto(ctx, &bot.SendPhotoParams{
				ChatID:  chatID,
				Photo:   photoUpload,
				Caption: text,
			})
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≤ —á–∞—Ç (ID %d): %v", chatID, err)
			}
		} else {
			_, err := b.SendMessage(ctx, &bot.SendMessageParams{
				ChatID: chatID,
				Text:   text,
			})
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç (ID %d): %v", chatID, err)
			}
		}
	}

	// –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º (–ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ).
	for _, admin := range admins {
		sendMsg(int64(admin), fullMsgText)
	}

	// –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞—è–≤–∫–∏ –≤—Ä–∞—á–∞–º –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ (—É–º–µ–Ω—å—à—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ).
	doctors, ok := doctorsBySpecialty[specialty]
	if ok && len(doctors) > 0 {
		for _, doc := range doctors {
			sendMsg(doc.TelegramID, reducedMsgText)
		}
	}

	// –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞—è–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É (—É–º–µ–Ω—å—à—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ).
	sendMsg(groupID, reducedMsgText)

	// –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞—è–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª/—á–∞—Ç @mediHubDoctors.
	if photoData != nil {
		photoUpload := &models.InputFileUpload{
			Filename: photoFileName,
			Data:     bytes.NewReader(photoData),
		}
		_, err = b.SendPhoto(ctx, &bot.SendPhotoParams{
			ChatID:  "@mediHubDoctors",
			Photo:   photoUpload,
			Caption: fullMsgText,
		})
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≤ —á–∞—Ç @mediHubDoctors: %v", err)
		}
	} else {
		_, err = b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: "@mediHubDoctors",
			Text:   fullMsgText,
		})
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç @mediHubDoctors: %v", err)
		}
	}

	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Content-Type", "text/plain; charset=utf-8")
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º (–ø–æ–ª–Ω–æ—Å—Ç—å—é), –≤—Ä–∞—á–∞–º –∏ –≥—Ä—É–ø–ø–µ (–±–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏ –∞–¥—Ä–µ—Å–∞), –∞ —Ç–∞–∫–∂–µ –≤ @mediHubDoctors!"))
}
