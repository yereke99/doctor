package main

import (
	"bytes"
	"context"
	"doctor/config"
	"doctor/traits/logger"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"os/signal"
	"path/filepath"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
	"go.uber.org/zap"
)

// DoctorRegistration —Ö—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Ä–∞—á–∞.
type DoctorRegistration struct {
	ID         int64
	FullName   string
	DoctorType string
	Experience string
	WorkDate   string
	StartTime  string
	EndTime    string
	TelegramID int64  // Telegram ID –¥–æ–∫—Ç–æ—Ä–∞ (–ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –∏–∑ —Ñ–æ—Ä–º—ã)
	FilePath   string // –ü—É—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
}

var (
	registrations      = make(map[int64]DoctorRegistration)    // –æ–±—â–∞—è –º–∞–ø–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Ä–∞—á–∞
	doctorsBySpecialty = make(map[string][]DoctorRegistration) // –¥–ª—è –∫–∞–∂–¥–æ–π —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ —Å—Ä–µ–∑ –≤—Ä–∞—á–µ–π
	regMu              sync.Mutex
)

// specialtyMapping –ø—Ä–∏–≤–æ–¥–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π (–Ω–∞ —Ä—É—Å—Å–∫–æ–º) –∫ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –≤–∏–¥—É (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º).
var specialtyMapping = map[string]string{
	"–¢–µ—Ä–∞–ø–µ–≤—Ç":          "THERAPIST",
	"–•–∏—Ä—É—Ä–≥":            "SURGEON",
	"–ö–∞—Ä–¥–∏–æ–ª–æ–≥":         "CARDIOLOG",
	"–ù–µ–≤—Ä–æ–ª–æ–≥":          "NEUROLOGIST",
	"–õ–û–†":               "ENT",
	"–ü—Å–∏—Ö–æ–ª–æ–≥":          "PSYCHOLOGIST",
	"–í—Ä–∞—á –Ω–∞ –¥–æ–º—É":      "HOME_DOCTOR",
	"–ú–µ–¥—Å–µ—Å—Ç—Ä–∞ –Ω–∞ –¥–æ–º—É": "HOME_NURSE",
	"–ê–Ω–∞–ª–∏–∑":            "LAB_TEST",
	"–ö–∞–ø–µ–ª—å–Ω–∏—Ü–∞ –∫ –º–µ–¥–ø–µ—Ä—Å–æ–Ω–∞–ª—É": "IV_DRIP",
}

// reverseSpecialtyMapping –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.
var reverseSpecialtyMapping = map[string]string{
	"THERAPIST":    "–¢–µ—Ä–∞–ø–µ–≤—Ç",
	"SURGEON":      "–•–∏—Ä—É—Ä–≥",
	"CARDIOLOG":    "–ö–∞—Ä–¥–∏–æ–ª–æ–≥",
	"NEUROLOGIST":  "–ù–µ–≤—Ä–æ–ª–æ–≥",
	"ENT":          "–õ–û–†",
	"PSYCHOLOGIST": "–ü—Å–∏—Ö–æ–ª–æ–≥",
	"HOME_DOCTOR":  "–í—Ä–∞—á –Ω–∞ –¥–æ–º—É",
	"HOME_NURSE":   "–ú–µ–¥—Å–µ—Å—Ç—Ä–∞ –Ω–∞ –¥–æ–º—É",
	"LAB_TEST":     "–ê–Ω–∞–ª–∏–∑",
	"IV_DRIP":      "–ö–∞–ø–µ–ª—å–Ω–∏—Ü–∞ –∫ –º–µ–¥–ø–µ—Ä—Å–æ–Ω–∞–ª—É",
}

func main() {
	zapLogger, err := logger.NewLogger()
	if err != nil {
		panic(err)
	}

	ctx, cancel := signal.NotifyContext(context.Background(), os.Interrupt)
	defer cancel()

	cfg, err := config.NewConfig()
	if err != nil {
		zapLogger.Error("error init config", zap.Error(err))
		return
	}

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline callback
	opts := []bot.Option{
		bot.WithDefaultHandler(handler),
		bot.WithCallbackQueryDataHandler("doctor_", bot.MatchTypePrefix, InlineHandlerWrapper),
	}

	token := cfg.Token

	b, err := bot.New(token, opts...)
	if err != nil {
		zapLogger.Error("error creating bot config", zap.Error(err))
		return
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä —Å –¥–≤—É–º—è –º–∞—Ä—à—Ä—É—Ç–∞–º–∏:
	// /doctor ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Ä–∞—á–∞ (POST-—Ñ–æ—Ä–º–∞ —Å —Ñ–∞–π–ª–æ–º)
	// /api/open ‚Äî –ø—Ä–∏—ë–º –∑–∞—è–≤–æ–∫ –æ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ (GET-–∑–∞–ø—Ä–æ—Å —Å query-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏)
	go startWebServer(cfg.Token, ctx, b)
	zapLogger.Info("started bot")
	b.Start(ctx)
}

// handler ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –±–æ—Ç—É –Ω–∞–ø—Ä—è–º—É—é).
func handler(ctx context.Context, b *bot.Bot, update *models.Update) {
	if update.Message == nil {
		return
	}
	_, err := b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text:   "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-—Ñ–æ—Ä–º—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
	})
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

// InlineHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è inline-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤—Ä–∞—á–∞.
// –û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ callback.Data –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç "doctor_{id}".
func InlineHandler(ctx context.Context, b *bot.Bot, callback *models.CallbackQuery) {
	parts := strings.Split(callback.Data, "_")
	if len(parts) < 2 {
		b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
			CallbackQueryID: callback.ID,
			Text:            "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
		})
		return
	}

	doctorID, err := strconv.ParseInt(parts[1], 10, 64)
	if err != nil {
		b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
			CallbackQueryID: callback.ID,
			Text:            "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ID",
		})
		return
	}

	regMu.Lock()
	registration, exists := registrations[doctorID]
	if exists {
		delete(registrations, doctorID)
	}
	regMu.Unlock()

	if !exists {
		b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
			CallbackQueryID: callback.ID,
			Text:            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
		})
		return
	}

	confirmationText := "–í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –í—ã —Ç–µ–ø–µ—Ä—å –¥–æ–∫—Ç–æ—Ä! üòä"
	_, err = b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: registration.TelegramID,
		Text:   confirmationText,
	})
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–∫—Ç–æ—Ä—É: %v", err)
	}

	b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
		CallbackQueryID: callback.ID,
		Text:            "–î–æ–∫—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!",
	})
}

// InlineHandlerWrapper –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç InlineHandler –∫ —Ç–∏–ø—É bot.HandlerFunc.
func InlineHandlerWrapper(ctx context.Context, b *bot.Bot, update *models.Update) {
	if update.CallbackQuery == nil {
		return
	}
	InlineHandler(ctx, b, update.CallbackQuery)
}

// startWebServer —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –º–∞—Ä—à—Ä—É—Ç—ã –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç HTTP-—Å–µ—Ä–≤–µ—Ä.
func startWebServer(botToken string, ctx context.Context, b *bot.Bot) {
	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Ä–∞—á–∞.
	http.HandleFunc("/doctor", func(w http.ResponseWriter, r *http.Request) {
		if r.Method == http.MethodGet {
			serveDoctor(w, r)
		} else if r.Method == http.MethodPost {
			doctorHandler(w, r, ctx, b)
		} else {
			http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		}
	})

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞—è–≤–æ–∫ –æ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤.
	http.HandleFunc("/api/open", func(w http.ResponseWriter, r *http.Request) {
		if r.Method == http.MethodGet {
			patientAppointmentHandler(w, r, ctx, b)
		} else {
			http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		}
	})

	// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å—Ç–∞—Ç–∏–∫–∏.
	http.HandleFunc("/", serveIndex)

	port := "8080"
	log.Printf("–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É :%s", port)
	log.Fatal(http.ListenAndServe(":"+port, nil))
}

func serveIndex(w http.ResponseWriter, r *http.Request) {
	http.ServeFile(w, r, "index.html")
}

func serveDoctor(w http.ResponseWriter, r *http.Request) {
	http.ServeFile(w, r, "doctor.html")
}

// doctorHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç POST-–∑–∞–ø—Ä–æ—Å —Å –¥–∞–Ω–Ω—ã–º–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Ä–∞—á–∞.
// –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è, —Ñ–∞–π–ª –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –¥–∏—Å–∫, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º.
func doctorHandler(w http.ResponseWriter, r *http.Request, ctx context.Context, b *bot.Bot) {
	if err := r.ParseMultipartForm(32 << 20); err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–æ—Ä–º—ã: "+err.Error(), http.StatusBadRequest)
		return
	}

	fullName := r.FormValue("full_name")
	doctorType := r.FormValue("doctor_type")
	experience := r.FormValue("experience")
	workDate := r.FormValue("work_date")
	startTime := r.FormValue("start_time")
	endTime := r.FormValue("end_time")
	telegramIDStr := r.FormValue("telegram_id")
	telegramID, err := strconv.ParseInt(telegramIDStr, 10, 64)
	if err != nil {
		http.Error(w, "–ù–µ–≤–µ—Ä–Ω—ã–π Telegram ID: "+err.Error(), http.StatusBadRequest)
		return
	}

	file, header, err := r.FormFile("document")
	if err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞: "+err.Error(), http.StatusBadRequest)
		return
	}
	defer file.Close()

	docDir := "./documents"
	if err := os.MkdirAll(docDir, 0755); err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: "+err.Error(), http.StatusInternalServerError)
		return
	}

	filePath := filepath.Join(docDir, header.Filename)
	dst, err := os.Create(filePath)
	if err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞: "+err.Error(), http.StatusInternalServerError)
		return
	}
	defer dst.Close()

	if _, err := io.Copy(dst, file); err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: "+err.Error(), http.StatusInternalServerError)
		return
	}

	doctorID := time.Now().Unix()
	registration := DoctorRegistration{
		ID:         doctorID,
		FullName:   fullName,
		DoctorType: doctorType,
		Experience: experience,
		WorkDate:   workDate,
		StartTime:  startTime,
		EndTime:    endTime,
		TelegramID: telegramID,
		FilePath:   filePath,
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –æ–±—â–µ–π –º–∞–ø–µ –∏ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.
	regMu.Lock()
	registrations[doctorID] = registration
	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á: –µ—Å–ª–∏ –∏–º–µ–µ—Ç—Å—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ.
	key := doctorType
	if norm, ok := specialtyMapping[doctorType]; ok {
		key = norm
	}
	doctorsBySpecialty[key] = append(doctorsBySpecialty[key], registration)
	regMu.Unlock()

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
	caption := fmt.Sprintf(
		"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Ä–∞—á–∞:\n–§–ò–û: %s\n–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: %s\n–°—Ç–∞–∂: %s\n–î–∞—Ç–∞: %s\n–í—Ä–µ–º—è: %s - %s",
		fullName, doctorType, experience, workDate, startTime, endTime,
	)

	// –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏.
	inlineKeyboard := models.InlineKeyboardMarkup{
		InlineKeyboard: [][]models.InlineKeyboardButton{
			{
				{
					Text:         "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
					CallbackData: fmt.Sprintf("doctor_%d", doctorID),
				},
			},
		},
	}

	data, err := os.ReadFile(filePath)
	if err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: "+err.Error(), http.StatusInternalServerError)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.
	admins := []int{800703982, 809550522}
	for _, admin := range admins {
		fileReader := bytes.NewReader(data)
		adminDoc := &bot.SendDocumentParams{
			ChatID: admin,
			Document: &models.InputFileUpload{
				Filename: filepath.Base(filePath),
				Data:     fileReader,
			},
			Caption:     caption,
			ParseMode:   "HTML",
			ReplyMarkup: inlineKeyboard,
		}
		_, err := b.SendDocument(ctx, adminDoc)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∞–¥–º–∏–Ω—É (ID %d): %v", admin, err)
		}
	}

	// –°–æ–æ–±—â–∞–µ–º –¥–æ–∫—Ç–æ—Ä—É, —á—Ç–æ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –∏ –¥–∞—ë–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –±–æ—Ç—É.
	doctorMsg := fmt.Sprintf(
		"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π: %s\n–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.",
		"https://t.me/dariger_test_bot",
	)
	_, err = b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: registration.TelegramID,
		Text:   doctorMsg,
	})
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–∫—Ç–æ—Ä—É: %v", err)
	}

	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Content-Type", "text/plain; charset=utf-8")
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏ –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ!"))
}

// patientAppointmentHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç GET-–∑–∞–ø—Ä–æ—Å—ã –æ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ —Å –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ –ø—Ä–∏—ë–º.
// –°–Ω–∞—á–∞–ª–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.
// –ó–∞—Ç–µ–º, –µ—Å–ª–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –µ—Å—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—Ä–∞—á–∏ (–∏–∑ doctorsBySpecialty),
// –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —ç—Ç–∏–º –≤—Ä–∞—á–∞–º (–±–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤, –∞–¥—Ä–µ—Å–∞ –∏ Telegram ID),
// –∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –≤—ã–≤–æ–¥–∏—Ç—Å—è –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–ö–∞—Ä–¥–∏–æ–ª–æ–≥¬ª).
func patientAppointmentHandler(w http.ResponseWriter, r *http.Request, ctx context.Context, b *bot.Bot) {
	q := r.URL.Query()
	fullName := q.Get("full_name")
	age := q.Get("age")
	gender := q.Get("gender")
	complaints := q.Get("complaints")
	duration := q.Get("duration")
	specialty := q.Get("specialty")
	contacts := q.Get("contacts")
	address := q.Get("address")

	// –ï—Å–ª–∏ –§–ò–û –ø—É—Å—Ç–æ–µ, –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ "–ù–µ —É–∫–∞–∑–∞–Ω".
	if fullName == "" {
		fullName = "–ù–µ —É–∫–∞–∑–∞–Ω"
	}

	// –ü—Ä–∏–≤–æ–¥–∏–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∫ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –≤–∏–¥—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å –≤ specialtyMapping.
	if mapped, ok := specialtyMapping[specialty]; ok {
		specialty = mapped
	}
	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—Ä–∞—á—É (—É–¥–æ–±–æ—á–∏—Ç–∞–µ–º–æ).
	specialtyHuman := specialty
	if rev, ok := reverseSpecialtyMapping[specialty]; ok {
		specialtyHuman = rev
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–±–µ–∑ Telegram ID).
	fullMsgText := fmt.Sprintf(
		"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–∏—ë–º:\n–§–ò–û: %s\n–í–æ–∑—Ä–∞—Å—Ç: %s\n–ü–æ–ª: %s\n–ñ–∞–ª–æ–±—ã: %s\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏–º–ø—Ç–æ–º–æ–≤: %s –¥–Ω–µ–π\n–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: %s\n–ö–æ–Ω—Ç–∞–∫—Ç—ã: %s\n–ê–¥—Ä–µ—Å: %s",
		fullName, age, gender, complaints, duration, specialtyHuman, contacts, address,
	)
	admins := []int{800703982, 809550522}
	for _, admin := range admins {
		_, err := b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: admin,
			Text:   fullMsgText,
		})
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É (ID %d): %v", admin, err)
		}
	}

	// –ï—Å–ª–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–º–µ—é—Ç—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—Ä–∞—á–∏,
	// –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–±–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤, –∞–¥—Ä–µ—Å–∞ –∏ Telegram ID).
	doctors, ok := doctorsBySpecialty[specialty]
	if ok && len(doctors) > 0 {
		msgForDoctors := fmt.Sprintf(
			"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–∏—ë–º:\n–§–ò–û: %s\n–í–æ–∑—Ä–∞—Å—Ç: %s\n–ü–æ–ª: %s\n–ñ–∞–ª–æ–±—ã: %s\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏–º–ø—Ç–æ–º–æ–≤: %s –¥–Ω–µ–π\n–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: %s",
			fullName, age, gender, complaints, duration, specialtyHuman,
		)
		for _, doc := range doctors {
			_, err := b.SendMessage(ctx, &bot.SendMessageParams{
				ChatID: doc.TelegramID,
				Text:   msgForDoctors,
			})
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–∫—Ç–æ—Ä—É (ID %d): %v", doc.TelegramID, err)
			}
		}
	}

	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Content-Type", "text/plain; charset=utf-8")
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!"))
}
