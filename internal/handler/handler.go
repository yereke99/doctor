// handler/handler.go
package handler

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"path/filepath"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
	"github.com/go-telegram/ui/slider"
	"go.uber.org/zap"
)

// DoctorRegistration —Ö—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Ä–∞—á–∞.
type DoctorRegistration struct {
	ID          int64
	FullName    string
	Contact     string
	TelegramID  int64
	AvatarPath  string
	DiplomaPath string
	CertPath    string
}

// Handler —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ callback.
type Handler struct {
	registrations           map[int64]DoctorRegistration
	doctorsBySpecialty      map[string][]DoctorRegistration
	regMu                   sync.Mutex
	specialtyMapping        map[string]string
	reverseSpecialtyMapping map[string]string
	logger                  *zap.Logger
}

// NewHandler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Handler —Å –ø—É—Å—Ç—ã–º–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞–º–∏ –∏ –∫–∞—Ä—Ç–∞–º–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π.
func NewHandler(logger *zap.Logger) *Handler {
	return &Handler{
		registrations:      make(map[int64]DoctorRegistration),
		doctorsBySpecialty: make(map[string][]DoctorRegistration),
		specialtyMapping: map[string]string{
			"–¢–µ—Ä–∞–ø–µ–≤—Ç":          "THERAPIST",
			"–•–∏—Ä—É—Ä–≥":            "SURGEON",
			"–ö–∞—Ä–¥–∏–æ–ª–æ–≥":         "CARDIOLOG",
			"–ù–µ–≤—Ä–æ–ª–æ–≥":          "NEUROLOGIST",
			"–õ–û–†":               "ENT",
			"–ü—Å–∏—Ö–æ–ª–æ–≥":          "PSYCHOLOGIST",
			"–í—Ä–∞—á –Ω–∞ –¥–æ–º—É":      "HOME_DOCTOR",
			"–ú–µ–¥—Å–µ—Å—Ç—Ä–∞ –Ω–∞ –¥–æ–º—É": "HOME_NURSE",
			"–ê–Ω–∞–ª–∏–∑":            "LAB_TEST",
			"–ö–∞–ø–µ–ª—å–Ω–∏—Ü–∞ –∫ –º–µ–¥–ø–µ—Ä—Å–æ–Ω–∞–ª—É": "IV_DRIP",
		},
		reverseSpecialtyMapping: map[string]string{
			"THERAPIST":    "–¢–µ—Ä–∞–ø–µ–≤—Ç",
			"SURGEON":      "–•–∏—Ä—É—Ä–≥",
			"CARDIOLOG":    "–ö–∞—Ä–¥–∏–æ–ª–æ–≥",
			"NEUROLOGIST":  "–ù–µ–≤—Ä–æ–ª–æ–≥",
			"ENT":          "–õ–û–†",
			"PSYCHOLOGIST": "–ü—Å–∏—Ö–æ–ª–æ–≥",
			"HOME_DOCTOR":  "–í—Ä–∞—á –Ω–∞ –¥–æ–º—É",
			"HOME_NURSE":   "–ú–µ–¥—Å–µ—Å—Ç—Ä–∞ –Ω–∞ –¥–æ–º—É",
			"LAB_TEST":     "–ê–Ω–∞–ª–∏–∑",
			"IV_DRIP":      "–ö–∞–ø–µ–ª—å–Ω–∏—Ü–∞ –∫ –º–µ–¥–ø–µ—Ä—Å–æ–Ω–∞–ª—É",
		},
		logger: logger,
	}
}

// DefaultHandler –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ª—é–±—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
func (h *Handler) DefaultHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	if update.Message == nil {
		return
	}
	_, err := b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text:   "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-—Ñ–æ—Ä–º—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
	})
	if err != nil {
		h.logger.Warn("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è DefaultHandler", zap.Error(err))
	}
}

// InlineHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –ø–æ –∫–Ω–æ–ø–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Ä–∞—á–∞.
func (h *Handler) InlineHandler(ctx context.Context, b *bot.Bot, callback *models.CallbackQuery) {
	parts := strings.Split(callback.Data, "_")
	if len(parts) < 2 {
		b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{CallbackQueryID: callback.ID, Text: "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"})
		return
	}
	doctorID, err := strconv.ParseInt(parts[1], 10, 64)
	if err != nil {
		b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{CallbackQueryID: callback.ID, Text: "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ID"})
		return
	}
	h.regMu.Lock()
	reg, ok := h.registrations[doctorID]
	if ok {
		delete(h.registrations, doctorID)
	}
	h.regMu.Unlock()
	if !ok {
		b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{CallbackQueryID: callback.ID, Text: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"})
		return
	}
	_, err = b.SendMessage(ctx, &bot.SendMessageParams{ChatID: reg.TelegramID, Text: "–í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –í—ã —Ç–µ–ø–µ—Ä—å –¥–æ–∫—Ç–æ—Ä! üòä"})
	if err != nil {
		h.logger.Warn("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–∫—Ç–æ—Ä—É", zap.Error(err))
	}
	b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{CallbackQueryID: callback.ID, Text: "–î–æ–∫—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!"})
}

// InlineHandlerWrapper –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç InlineHandler –∫ Signature bot.HandlerFunc.
func (h *Handler) InlineHandlerWrapper(ctx context.Context, b *bot.Bot, update *models.Update) {
	if update.CallbackQuery == nil {
		return
	}
	h.InlineHandler(ctx, b, update.CallbackQuery)
}

// DoctorHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç POST-—Ñ–æ—Ä–º—É /doctor –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Ä–∞—á–∞.
func (h *Handler) DoctorHandler(w http.ResponseWriter, r *http.Request, ctx context.Context, b *bot.Bot) {
	if r.Method == http.MethodOptions {
		w.Header().Set("Access-Control-Allow-Origin", "*")
		w.Header().Set("Access-Control-Allow-Methods", "POST, OPTIONS")
		w.Header().Set("Access-Control-Allow-Headers", "Content-Type")
		w.WriteHeader(http.StatusOK)
		return
	}
	if r.Method != http.MethodPost {
		http.Error(w, "–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω", http.StatusMethodNotAllowed)
		return
	}
	w.Header().Set("Access-Control-Allow-Origin", "*")
	if err := r.ParseMultipartForm(32 << 20); err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–æ—Ä–º—ã: "+err.Error(), http.StatusBadRequest)
		return
	}
	fullName := r.FormValue("full_name")
	contact := r.FormValue("contact")
	tid, err := strconv.ParseInt(r.FormValue("telegram_id"), 10, 64)
	if err != nil {
		http.Error(w, "–ù–µ–≤–µ—Ä–Ω—ã–π Telegram ID: "+err.Error(), http.StatusBadRequest)
		return
	}
	avaDir, docsDir := "./ava", "./documents"
	os.MkdirAll(avaDir, 0755)
	os.MkdirAll(docsDir, 0755)
	saveFile := func(field, dst string) (string, error) {
		file, hdr, err := r.FormFile(field)
		if err != nil {
			return "", err
		}
		defer file.Close()
		name := fmt.Sprintf("%d_%s", time.Now().UnixNano(), hdr.Filename)
		path := filepath.Join(dst, name)
		out, err := os.Create(path)
		if err != nil {
			return "", err
		}
		defer out.Close()
		if _, err := io.Copy(out, file); err != nil {
			return "", err
		}
		return path, nil
	}
	avatarPath, err := saveFile("avatar", avaDir)
	diplomaPath, err2 := saveFile("diploma", docsDir)
	certPath, err3 := saveFile("certificate", docsDir)
	if err != nil || err2 != nil || err3 != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤", http.StatusBadRequest)
		return
	}
	docID := time.Now().Unix()
	reg := DoctorRegistration{ID: docID, FullName: fullName, Contact: contact, TelegramID: tid, AvatarPath: avatarPath, DiplomaPath: diplomaPath, CertPath: certPath}
	h.regMu.Lock()
	h.registrations[docID] = reg
	h.regMu.Unlock()
	files := []struct{ Label, Path string }{{"–ê–≤–∞—Ç–∞—Ä–∫–∞", avatarPath}, {"–î–∏–ø–ª–æ–º", diplomaPath}, {"–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç", certPath}}
	var slides []slider.Slide
	for _, f := range files {
		data, err := os.ReadFile(f.Path)
		if err != nil {
			h.logger.Warn("—á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞", zap.String("path", f.Path), zap.Error(err))
			continue
		}
		slides = append(slides, slider.Slide{Text: f.Label, Photo: string(data), IsUpload: true})
	}
	onSelect := func(ctx context.Context, b *bot.Bot, msg models.MaybeInaccessibleMessage, idx int) {
		if msg.Message != nil {
			b.SendMessage(ctx, &bot.SendMessageParams{ChatID: msg.Message.Chat.ID, Text: fmt.Sprintf("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Ä–∞—á–∞ %s –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ", reg.FullName)})
		}
	}
	opts := []slider.Option{slider.OnSelect("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", true, onSelect)}
	admins := []int64{800703982, 809550522}
	for _, admin := range admins {
		sl := slider.New(b, slides, opts...)
		sl.Show(ctx, b, admin)
	}
	b.SendMessage(ctx, &bot.SendMessageParams{ChatID: tid, Text: "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."})
	w.Write([]byte("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞ –∏ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."))
}

// PatientAppointmentHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ –æ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ (GET/POST).
func (h *Handler) PatientAppointmentHandler(w http.ResponseWriter, r *http.Request, ctx context.Context, b *bot.Bot) {
	// CORS-preflight
	if r.Method == http.MethodOptions {
		w.Header().Set("Access-Control-Allow-Origin", "*")
		w.Header().Set("Access-Control-Allow-Methods", "GET, POST, OPTIONS")
		w.Header().Set("Access-Control-Allow-Headers", "Content-Type")
		w.WriteHeader(http.StatusOK)
		return
	}
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Content-Type", "text/plain; charset=utf-8")

	var (
		fullName, age, gender, complaints, duration string
		specialty, contacts, address                string
		photoData                                   []byte
		photoFileName                               string
		err                                         error
	)
	// –ü–æ–¥–¥–µ—Ä–∂–∫–∞ POST (—Å —Ñ–∞–π–ª–æ–º) –∏ GET (–±–µ–∑ —Ñ–∞–π–ª–∞)
	if r.Method == http.MethodPost {
		if err = r.ParseMultipartForm(32 << 20); err != nil {
			http.Error(w, "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–æ—Ä–º—ã: "+err.Error(), http.StatusBadRequest)
			return
		}

		fullName = r.FormValue("full_name")
		age = r.FormValue("age")
		gender = r.FormValue("gender")
		complaints = r.FormValue("complaints")
		duration = r.FormValue("duration")
		specialty = r.FormValue("specialty")
		contacts = r.FormValue("contacts")
		address = r.FormValue("address")
		file, header, ferr := r.FormFile("complaint_photo")
		if ferr == nil {
			defer file.Close()
			photoData, err = io.ReadAll(file)
			if err == nil {
				photoFileName = header.Filename
			}
		}
	} else {
		// GET-–∑–∞–ø—Ä–æ—Å
		q := r.URL.Query()
		fullName = q.Get("full_name")
		age = q.Get("age")
		gender = q.Get("gender")
		complaints = q.Get("complaints")
		duration = q.Get("duration")
		specialty = q.Get("specialty")
		contacts = q.Get("contacts")
		address = q.Get("address")
	}
	// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∂–∞–ª–æ–±—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
	if len(photoData) > 0 {
		patientDir := "./patient"
		if mkerr := os.MkdirAll(patientDir, 0755); mkerr != nil {
			h.logger.Warn("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ñ–æ—Ç–æ", zap.Error(mkerr))
		}
		fileName := fmt.Sprintf("patient_%d_%s", time.Now().UnixNano(), photoFileName)
		savePath := filepath.Join(patientDir, fileName)
		if werr := os.WriteFile(savePath, photoData, 0644); werr != nil {
			h.logger.Warn("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ –∂–∞–ª–æ–±—ã", zap.Error(werr))
		}
	}
	// –£–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
	if mapped, ok := h.specialtyMapping[specialty]; ok {
		specialty = mapped
	}
	// –ß–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
	specialtyHuman := specialty
	if rev, ok := h.reverseSpecialtyMapping[specialty]; ok {
		specialtyHuman = rev
	}
	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
	fullMsgText := fmt.Sprintf(
		`–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–∏—ë–º:
		–§–ò–û: %s
		–í–æ–∑—Ä–∞—Å—Ç: %s
		–ü–æ–ª: %s
		–ñ–∞–ª–æ–±—ã: %s
		–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏–º–ø—Ç–æ–º–æ–≤: %s –¥–Ω–µ–π
		–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: %s
		–ö–æ–Ω—Ç–∞–∫—Ç—ã: %s
		–ê–¥—Ä–µ—Å: %s`,
		fullName, age, gender, complaints, duration, specialtyHuman, contacts, address,
	)
	reducedMsgText := fmt.Sprintf(
		`–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–∏—ë–º:
		–§–ò–û: %s
		–í–æ–∑—Ä–∞—Å—Ç: %s
		–ü–æ–ª: %s
		–ñ–∞–ª–æ–±—ã: %s
		–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏–º–ø—Ç–æ–º–æ–≤: %s –¥–Ω–µ–π
		–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: %s`,
		fullName, age, gender, complaints, duration, specialtyHuman,
	)
	// –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∏ –≥—Ä—É–ø–ø—ã
	admins := []int64{800703982, 809550522}
	var groupID int64 = -1009876543210
	// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
	sendMsg := func(chatID int64, text string) {
		if len(photoData) > 0 {
			photoUpload := &models.InputFileUpload{Filename: photoFileName, Data: bytes.NewReader(photoData)}
			if _, err := b.SendPhoto(ctx, &bot.SendPhotoParams{ChatID: chatID, Photo: photoUpload, Caption: text}); err != nil {
				h.logger.Warn("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –ø–∞—Ü–∏–µ–Ω—Ç—Å–∫–æ–π –∑–∞—è–≤–∫–∏", zap.Int64("chatID", chatID), zap.Error(err))
			}
		} else {
			if _, err := b.SendMessage(ctx, &bot.SendMessageParams{ChatID: chatID, Text: text}); err != nil {
				h.logger.Warn("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç—Å–∫–æ–π –∑–∞—è–≤–∫–∏", zap.Int64("chatID", chatID), zap.Error(err))
			}
		}
	}
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º (–ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
	for _, admin := range admins {
		sendMsg(admin, fullMsgText)
	}
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–∞—á–∞–º –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ (—Å–æ–∫—Ä–∞—â—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
	if docs, ok := h.doctorsBySpecialty[specialty]; ok {
		for _, doc := range docs {
			sendMsg(doc.TelegramID, reducedMsgText)
		}
	}
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø–µ
	sendMsg(groupID, reducedMsgText)
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª @mediHubDoctors
	if len(photoData) > 0 {
		photoUpload := &models.InputFileUpload{Filename: photoFileName, Data: bytes.NewReader(photoData)}
		if _, err = b.SendPhoto(ctx, &bot.SendPhotoParams{ChatID: "@mediHubDoctors", Photo: photoUpload, Caption: fullMsgText}); err != nil {
			h.logger.Warn("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≤ @mediHubDoctors", zap.Error(err))
		}
	} else {
		if _, err = b.SendMessage(ctx, &bot.SendMessageParams{ChatID: "@mediHubDoctors", Text: fullMsgText}); err != nil {
			h.logger.Warn("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ @mediHubDoctors", zap.Error(err))
		}
	}
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞."))
}

// StartWebServer –∑–∞–ø—É—Å–∫–∞–µ—Ç HTTP —Å–µ—Ä–≤–µ—Ä —Å –º–∞—Ä—à—Ä—É—Ç–∞–º–∏ /doctor –∏ /api/open.
func (h *Handler) StartWebServer(botToken string, ctx context.Context, b *bot.Bot) {
	http.HandleFunc("/doctor", func(w http.ResponseWriter, r *http.Request) {
		h.DoctorHandler(w, r, ctx, b)
	})
	http.HandleFunc("/api/open", func(w http.ResponseWriter, r *http.Request) {
		h.PatientAppointmentHandler(w, r, ctx, b)
	})
	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		http.ServeFile(w, r, "index.html")
	})
	addr := ":8080"
	h.logger.Info("–≤–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω", zap.String("addr", addr))
	log.Fatal(http.ListenAndServe(addr, nil))
}
