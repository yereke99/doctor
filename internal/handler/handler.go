// handler/handler.go
package handler

import (
	"context"
	"doctor/internal/domain"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"path/filepath"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
	"github.com/go-telegram/ui/slider"
	"go.uber.org/zap"
)

type docMsg struct {
	chatID int64
	msgID  int
}

type Handler struct {
	registrations           map[int64]domain.DoctorRegistration
	doctorsBySpecialty      map[string][]domain.DoctorRegistration
	patientRequests         map[int64][]docMsg // userID ‚Üí —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Ä–∞—á–∞–º
	patientReqMu            sync.Mutex
	regMu                   sync.Mutex
	specialtyMapping        map[string]string
	reverseSpecialtyMapping map[string]string
	logger                  *zap.Logger
}

// NewHandler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Handler —Å –ø—É—Å—Ç—ã–º–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞–º–∏ –∏ –∫–∞—Ä—Ç–∞–º–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π.
func NewHandler(logger *zap.Logger) *Handler {
	return &Handler{
		registrations:      make(map[int64]domain.DoctorRegistration),
		doctorsBySpecialty: make(map[string][]domain.DoctorRegistration),
		patientRequests:    make(map[int64][]docMsg),
		specialtyMapping: map[string]string{
			"–¢–µ—Ä–∞–ø–µ–≤—Ç":          "THERAPIST",
			"–•–∏—Ä—É—Ä–≥":            "SURGEON",
			"–ö–∞—Ä–¥–∏–æ–ª–æ–≥":         "CARDIOLOG",
			"–ù–µ–≤—Ä–æ–ª–æ–≥":          "NEUROLOGIST",
			"–õ–û–†":               "ENT",
			"–ü—Å–∏—Ö–æ–ª–æ–≥":          "PSYCHOLOGIST",
			"–í—Ä–∞—á –Ω–∞ –¥–æ–º—É":      "HOME_DOCTOR",
			"–ú–µ–¥—Å–µ—Å—Ç—Ä–∞ –Ω–∞ –¥–æ–º—É": "HOME_NURSE",
			"–ê–Ω–∞–ª–∏–∑":            "LAB_TEST",
			"–ö–∞–ø–µ–ª—å–Ω–∏—Ü–∞ –∫ –º–µ–¥–ø–µ—Ä—Å–æ–Ω–∞–ª—É": "IV_DRIP",
		},
		reverseSpecialtyMapping: map[string]string{
			"THERAPIST":    "–¢–µ—Ä–∞–ø–µ–≤—Ç",
			"SURGEON":      "–•–∏—Ä—É—Ä–≥",
			"CARDIOLOG":    "–ö–∞—Ä–¥–∏–æ–ª–æ–≥",
			"NEUROLOGIST":  "–ù–µ–≤—Ä–æ–ª–æ–≥",
			"ENT":          "–õ–û–†",
			"PSYCHOLOGIST": "–ü—Å–∏—Ö–æ–ª–æ–≥",
			"HOME_DOCTOR":  "–í—Ä–∞—á –Ω–∞ –¥–æ–º—É",
			"HOME_NURSE":   "–ú–µ–¥—Å–µ—Å—Ç—Ä–∞ –Ω–∞ –¥–æ–º—É",
			"LAB_TEST":     "–ê–Ω–∞–ª–∏–∑",
			"IV_DRIP":      "–ö–∞–ø–µ–ª—å–Ω–∏—Ü–∞ –∫ –º–µ–¥–ø–µ—Ä—Å–æ–Ω–∞–ª—É",
		},
		logger: logger,
	}
}

// DefaultHandler –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ª—é–±—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
func (h *Handler) DefaultHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	if update.Message == nil {
		return
	}
	_, err := b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text:   "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-—Ñ–æ—Ä–º—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
	})
	if err != nil {
		h.logger.Warn("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è DefaultHandler", zap.Error(err))
	}
}

// InlineHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –ø–æ –∫–Ω–æ–ø–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Ä–∞—á–∞.
func (h *Handler) InlineHandler(ctx context.Context, b *bot.Bot, callback *models.CallbackQuery) {
	parts := strings.Split(callback.Data, "_")
	if len(parts) < 2 {
		b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{CallbackQueryID: callback.ID, Text: "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"})
		return
	}
	doctorID, err := strconv.ParseInt(parts[1], 10, 64)
	if err != nil {
		b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{CallbackQueryID: callback.ID, Text: "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ID"})
		return
	}
	h.regMu.Lock()
	reg, ok := h.registrations[doctorID]
	if ok {
		delete(h.registrations, doctorID)
	}
	h.regMu.Unlock()
	if !ok {
		b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{CallbackQueryID: callback.ID, Text: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"})
		return
	}
	_, err = b.SendMessage(ctx, &bot.SendMessageParams{ChatID: reg.TelegramID, Text: "–í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –í—ã —Ç–µ–ø–µ—Ä—å –¥–æ–∫—Ç–æ—Ä! üòä"})
	if err != nil {
		h.logger.Warn("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–∫—Ç–æ—Ä—É", zap.Error(err))
	}
	b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{CallbackQueryID: callback.ID, Text: "–î–æ–∫—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!"})
}

// InlineHandlerWrapper –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç InlineHandler –∫ Signature bot.HandlerFunc.
func (h *Handler) InlineHandlerWrapper(ctx context.Context, b *bot.Bot, update *models.Update) {
	if update.CallbackQuery == nil {
		return
	}
	h.InlineHandler(ctx, b, update.CallbackQuery)
}

func (h *Handler) DoctorHandler(w http.ResponseWriter, r *http.Request, ctx context.Context, b *bot.Bot) {
	// CORS
	if r.Method == http.MethodOptions {
		w.Header().Set("Access-Control-Allow-Origin", "*")
		w.Header().Set("Access-Control-Allow-Methods", "POST, OPTIONS")
		w.Header().Set("Access-Control-Allow-Headers", "Content-Type")
		w.WriteHeader(http.StatusOK)
		return
	}
	if r.Method != http.MethodPost {
		http.Error(w, "–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω", http.StatusMethodNotAllowed)
		return
	}
	w.Header().Set("Access-Control-Allow-Origin", "*")

	// –ü–∞—Ä—Å–∏–º —Ñ–æ—Ä–º—É
	if err := r.ParseMultipartForm(32 << 20); err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–æ—Ä–º—ã: "+err.Error(), http.StatusBadRequest)
		return
	}
	fullName := r.FormValue("full_name")
	specialty := r.FormValue("specialty")
	contact := r.FormValue("contact")
	tid, err := strconv.ParseInt(r.FormValue("telegram_id"), 10, 64)
	if err != nil {
		http.Error(w, "–ù–µ–≤–µ—Ä–Ω—ã–π Telegram ID: "+err.Error(), http.StatusBadRequest)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã —Ñ—Ä–æ–Ω—Ç –Ω–µ –∂–¥–∞–ª
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("OK"))

	// –§–æ–Ω: —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã –∏ —à–ª—ë–º —Å–ª–∞–π–¥–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
	go func() {
		avaDir, docsDir := "./ava", "./documents"
		os.MkdirAll(avaDir, 0755)
		os.MkdirAll(docsDir, 0755)

		type saveResult struct {
			label string
			path  string
			err   error
		}
		files := []struct {
			field, label, dst string
		}{
			{"avatar", "–ê–≤–∞—Ç–∞—Ä–∫–∞", avaDir},
			{"diploma", "–î–∏–ø–ª–æ–º", docsDir},
			{"certificate", "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç", docsDir},
		}

		var wg sync.WaitGroup
		results := make(chan saveResult, len(files))

		for _, f := range files {
			wg.Add(1)
			go func(field, label, dst string) {
				defer wg.Done()
				file, hdr, ferr := r.FormFile(field)
				if ferr != nil {
					results <- saveResult{label, "", ferr}
					return
				}
				defer file.Close()
				name := fmt.Sprintf("%d_%s", time.Now().UnixNano(), hdr.Filename)
				path := filepath.Join(dst, name)
				out, err := os.Create(path)
				if err != nil {
					results <- saveResult{label, "", err}
					return
				}
				defer out.Close()

				if _, err := io.Copy(out, file); err != nil {
					results <- saveResult{label, "", err}
					return
				}
				results <- saveResult{label, path, nil}
			}(f.field, f.label, f.dst)
		}

		wg.Wait()
		close(results)

		// —Å–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ —Ñ–∞–π–ª—ã
		var slides []slider.Slide
		for res := range results {
			if res.err != nil {
				h.logger.Warn("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞", zap.String("file", res.label), zap.Error(res.err))
				continue
			}
			data, err := os.ReadFile(res.path)
			if err != nil {
				h.logger.Warn("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞", zap.String("path", res.path), zap.Error(err))
				continue
			}
			slides = append(slides, slider.Slide{
				Text:     res.label,
				Photo:    string(data),
				IsUpload: true,
			})
		}

		// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Ä–∞—á–∞ –≤ –ø–∞–º—è—Ç–∏
		docID := time.Now().Unix()
		reg := domain.DoctorRegistration{
			ID:         docID,
			FullName:   fullName,
			Specialty:  specialty,
			Contact:    contact,
			TelegramID: tid,
			AvatarPath: "", DiplomaPath: "", CertPath: "",
		}
		// –ò–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑–≤–ª–µ—á—ë–º –ø—É—Ç–∏
		for _, s := range slides {
			switch s.Text {
			case "–ü—Ä–æ—Ñ–∏–ª—å —Ñ–æ—Ç–æ—Å—ã":
				reg.AvatarPath = s.Photo
			case "–î–∏–ø–ª–æ–º":
				reg.DiplomaPath = s.Photo
			case "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç":
				reg.CertPath = s.Photo
			}
		}

		h.regMu.Lock()
		h.registrations[docID] = reg
		h.doctorsBySpecialty[specialty] = append(h.doctorsBySpecialty[specialty], reg)
		h.regMu.Unlock()

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–∞–π–¥–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
		onSelect := func(ctx context.Context, b *bot.Bot, msg models.MaybeInaccessibleMessage, idx int) {
			if msg.Message != nil {
				b.SendMessage(ctx, &bot.SendMessageParams{
					ChatID: msg.Message.Chat.ID,
					Text:   fmt.Sprintf("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Ä–∞—á–∞ %s –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ", reg.FullName),
				})
			}
		}
		opts := []slider.Option{slider.OnSelect("‚úÖ “ö–∞–±—ã–ª–¥–∞—É", true, onSelect)}
		for _, admin := range []int64{800703982} {
			sl := slider.New(b, slides, opts...)
			sl.Show(ctx, b, admin)
		}

		// –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–∞–º–æ–≥–æ –≤—Ä–∞—á–∞
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: tid,
			Text:   "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
		})
	}()
}

// PatientAppointmentHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ –æ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ (GET/POST).
func (h *Handler) PatientAppointmentHandler(w http.ResponseWriter, r *http.Request, ctx context.Context, b *bot.Bot) {
	// CORS & –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Access-Control-Allow-Headers", "Content-Type, Accept")
	if r.Method == http.MethodOptions {
		w.Header().Set("Access-Control-Allow-Methods", "GET, POST, OPTIONS")
		w.WriteHeader(http.StatusOK)
		return
	}
	w.Header().Set("Content-Type", "text/plain; charset=utf-8")

	// –ü–∞—Ä—Å–∏–º —Ñ–æ—Ä–º—É
	if err := r.ParseMultipartForm(32 << 20); err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–æ—Ä–º—ã: "+err.Error(), http.StatusBadRequest)
		return
	}
	userIDStr := r.FormValue("user_id")
	fullName := r.FormValue("full_name")
	age := r.FormValue("age")
	gender := r.FormValue("gender")
	complaints := r.FormValue("complaints")
	duration := r.FormValue("duration")
	rawSpecialty := r.FormValue("specialty")
	contacts := r.FormValue("contacts")
	address := r.FormValue("address")

	// —á–∏—Ç–∞–µ–º —Ñ–æ—Ç–æ –∂–∞–ª–æ–±—ã
	var photoData []byte
	var photoName string
	if file, hdr, ferr := r.FormFile("complaint_photo"); ferr == nil {
		defer file.Close()
		if data, err := io.ReadAll(file); err == nil {
			photoData = data
			photoName = hdr.Filename
		}
	}

	// —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º OK, —á—Ç–æ–±—ã –∫–ª–∏–µ–Ω—Ç –Ω–µ –∂–¥–∞–ª —Ç—è–∂—ë–ª–æ–π —Ä–∞–±–æ—Ç—ã
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("OK"))

	go func() {
		// 1) —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
		var photoPath, fileName string
		if len(photoData) > 0 {
			dir := "./patient"
			if err := os.MkdirAll(dir, 0755); err != nil {
				h.logger.Error("error in create directory", zap.Error(err))
			}
			fn := fmt.Sprintf("patient_%d_%s", time.Now().UnixNano(), photoName)
			path := filepath.Join(dir, fn)
			if err := os.WriteFile(path, photoData, 0644); err != nil {
				h.logger.Warn("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ", zap.Error(err))
			}
			photoPath, fileName = path, fn
		}

		photoPath, fileName = "", ""

		// 2) –≥–æ—Ç–æ–≤–∏–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
		dispSpec := rawSpecialty
		if rev, ok := h.reverseSpecialtyMapping[rawSpecialty]; ok {
			dispSpec = rev
		}
		msgText := fmt.Sprintf(
			"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n"+
				"–§–ò–û: %s\n–í–æ–∑—Ä–∞—Å—Ç: %s\n–ü–æ–ª: %s\n–ñ–∞–ª–æ–±—ã: %s\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %s –¥–Ω.\n"+
				"–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: %s\n–ö–æ–Ω—Ç–∞–∫—Ç—ã: %s\n–ê–¥—Ä–µ—Å: %s",
			fullName, age, gender, complaints, duration,
			dispSpec, contacts, address,
		)

		// 3) —Ä–∞—Å—Å—ã–ª–∞–µ–º –≤—Ä–∞—á–∞–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º msgID
		userID, _ := strconv.ParseInt(userIDStr, 10, 64)
		var sent []docMsg
		f, err := os.Open(photoPath)
		if err != nil {
			h.logger.Warn("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞", zap.Error(err))
			return
		}
		defer f.Close()
		for _, doc := range h.doctorsBySpecialty[rawSpecialty] {
			cb := fmt.Sprintf("delete_%d_%d", userID, doc.TelegramID)
			markup := &models.InlineKeyboardMarkup{
				InlineKeyboard: [][]models.InlineKeyboardButton{{
					{Text: "‚úÖ “ö–∞–±—ã–ª–¥–∞–¥—ã–º", CallbackData: cb},
				}},
			}

			if photoPath != "" && fileName != "" {
				msg, err := b.SendPhoto(ctx, &bot.SendPhotoParams{
					ChatID: doc.TelegramID,
					Photo: &models.InputFileUpload{
						Filename: fileName,
						Data:     f,
					},
					Caption:     msgText,
					ReplyMarkup: markup,
				})
				if err == nil {
					sent = append(sent, docMsg{chatID: doc.TelegramID, msgID: msg.ID})
				} else {
					h.logger.Warn("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Ä–∞—á—É", zap.Error(err))
				}
			} else {
				msg, err := b.SendMessage(ctx, &bot.SendMessageParams{
					ChatID:      doc.TelegramID,
					Text:        msgText,
					ReplyMarkup: markup,
				})
				if err == nil {
					sent = append(sent, docMsg{chatID: doc.TelegramID, msgID: msg.ID})
				} else {
					h.logger.Warn("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Ä–∞—á—É", zap.Error(err))
				}
			}

		}

		// —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è DeleteMessageHandler
		h.patientReqMu.Lock()
		h.patientRequests[userID] = sent
		h.patientReqMu.Unlock()

		// 4) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π —á–∞—Ç
		groupID := int64(-1009876543210)
		b.SendMessage(ctx, &bot.SendMessageParams{ChatID: groupID, Text: msgText})
	}()
}

// DeleteMessageHandler ‚Äî —É–¥–∞–ª—è–µ—Ç –∑–∞—è–≤–∫–∏ —É –¥—Ä—É–≥–∏—Ö –≤—Ä–∞—á–µ–π –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –Ω–∞–∂–∞—Ç–∏–∏
func (h *Handler) DeleteMessageHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	parts := strings.Split(update.CallbackQuery.Data, "_")
	if len(parts) != 3 {
		b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
			CallbackQueryID: update.CallbackQuery.ID,
			Text:            "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
		})
		return
	}
	userID, err1 := strconv.ParseInt(parts[1], 10, 64)
	docChatID, err2 := strconv.ParseInt(parts[2], 10, 64)
	if err1 != nil || err2 != nil {
		b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
			CallbackQueryID: update.CallbackQuery.ID,
			Text:            "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
		})
		return
	}

	// –ø–æ–ª—É—á–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
	h.patientReqMu.Lock()
	msgs := h.patientRequests[userID]
	delete(h.patientRequests, userID)
	h.patientReqMu.Unlock()

	// —É–¥–∞–ª—è–µ–º —É –≤—Å–µ—Ö, –∫—Ä–æ–º–µ —Ç–æ–≥–æ, –∫—Ç–æ –Ω–∞–∂–∞–ª
	for _, dm := range msgs {
		if dm.chatID != docChatID {
			b.DeleteMessage(ctx, &bot.DeleteMessageParams{
				ChatID:    dm.chatID,
				MessageID: dm.msgID,
			})
		}
	}

	// —É–¥–∞–ª—è–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
	if mq := update.CallbackQuery.Message; mq.Message != nil {
		b.DeleteMessage(ctx, &bot.DeleteMessageParams{
			ChatID:    mq.Message.Chat.ID,
			MessageID: mq.Message.ID,
		})
	}

	// —É–±–∏—Ä–∞–µ–º spinner
	b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
		CallbackQueryID: update.CallbackQuery.ID,
		Text:            "“ö–∞–±—ã–ª–¥–∞–¥—ã–º!",
	})

	// —É–≤–µ–¥–æ–º–ª—è–µ–º –≤—Ä–∞—á–∞
	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.CallbackQuery.From.ID,
		Text:   "–•–∞–±–∞—Ä–ª–∞–º–∞ —Å”ô—Ç—Ç—ñ –∂–æ–π—ã–ª–¥—ã!",
	})
	// —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–∞
	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: userID,
		Text:   "–°—ñ–∑–¥—ñ“£ ”©—Ç—ñ–Ω—ñ—à—ñ“£—ñ–∑ “õ–∞–±—ã–ª–¥–∞–Ω–¥—ã, –¥”ô—Ä—ñ–≥–µ—Ä –∂–∞“õ—ã–Ω –∞—Ä–∞–¥–∞ —Ö–∞–±–∞—Ä–ª–∞—Å–∞—Ç—ã–Ω –±–æ–ª–∞–¥—ã.",
	})
}

// StartWebServer –∑–∞–ø—É—Å–∫–∞–µ—Ç HTTP —Å–µ—Ä–≤–µ—Ä —Å –º–∞—Ä—à—Ä—É—Ç–∞–º–∏ /doctor –∏ /api/open.
func (h *Handler) StartWebServer(botToken string, ctx context.Context, b *bot.Bot) {
	http.HandleFunc("/doctor", func(w http.ResponseWriter, r *http.Request) {
		h.DoctorHandler(w, r, ctx, b)
	})
	http.HandleFunc("/api/open", func(w http.ResponseWriter, r *http.Request) {
		h.PatientAppointmentHandler(w, r, ctx, b)
	})
	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		http.ServeFile(w, r, "index.html")
	})
	addr := ":8080"
	h.logger.Info("–≤–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω", zap.String("addr", addr))
	log.Fatal(http.ListenAndServe(addr, nil))
}
